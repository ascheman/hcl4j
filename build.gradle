buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://xbib.org/repository"
        }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'org.xbib.gradle.plugin:gradle-plugin-jflex:1.1.0'
        classpath "io.github.gradle-nexus:publish-plugin:1.0.0"
    }
}


apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: 'signing'
apply plugin: 'org.xbib.gradle.plugin.jflex'

ext {
    isBuildSnapshot = version.endsWith('-SNAPSHOT')
    isReleaseVersion = !isBuildSnapshot
}


group = 'net.aschemann.iac'
version = '0.4.4-SNAPSHOT'

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
sourceCompatibility = '1.7'
targetCompatibility = '1.7'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    api "commons-logging:commons-logging:1.2"
    testImplementation "org.codehaus.groovy:groovy-all:2.5.13"
    testImplementation "org.spockframework:spock-core:1.3-groovy-2.5"
}

if (isReleaseVersion) {
    apply plugin: "io.github.gradle-nexus.publish-plugin"
    nexusPublishing {
        repositories {
            sonatype {
                if (project.hasProperty('mavenUser')) {
                    username = mavenUser
                    password = mavenPassword
                }
            }
        }
    }
} else {

}

publishing {
    repositories {
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
            if (project.hasProperty('mavenUser')) {
                logger.info "Using OSS Sonatype user '${mavenUser}' (by property 'mavenUser')"
                if (!project.hasProperty('mavenPassword')) {
                    throw new RuntimeException ("Please set project property 'mavenPassword'")
                }
                credentials {
                    username mavenUser
                    password mavenPassword
                }
            }
            mavenContent {
                snapshotsOnly()
            }
            metadataSources {
                mavenPom()
                artifact()
                ignoreGradleMetadataRedirection()
            }
        }
    }
    publications {
        maven(MavenPublication) {
            artifactId 'hcl4j'
            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name 'hcl4j'
                    description 'Hashicorp Configuration Language (HCL) Java Parser'
                    url 'https://github.com/ascheman/hcl4j'
                    scm {
                        url 'https://github.com/ascheman/hcl4j'
                        connection 'scm:https://ascheman@github.com/ascheman/hcl4j.git'
                        developerConnection 'scm:git://github.com/ascheman/hcl4j.git'
                    }
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/license/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'davydotcom'
                            name 'David Estes'
                            email 'davydotcom@gmail.com'
                        }
                        developer {
                            id 'ascheman'
                            name 'Gerd Aschemann'
                            email 'gerd@aschemann.net'
                        }
                    }
                }
            }
            from components.java
            afterEvaluate {
                artifact sourcesJar
                artifact javadocJar
            }
        }
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task morpheusJavaDoc(type: Javadoc) {
    source = sourceSets.main.allJava
    title = "Hcl4j Docs"
}

task(console, dependsOn: 'classes', type: JavaExec) {
    main = 'groovy.ui.Console'
    classpath = sourceSets.main.runtimeClasspath
}

test {
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}


afterEvaluate {
    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
        sign publishing.publications.maven
    }
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}

//do not generate extra load on Nexus with new staging repository if signing fails
tasks.withType(io.github.gradlenexus.publishplugin.InitializeNexusStagingRepository).configureEach {
    shouldRunAfter(tasks.withType(Sign))
}

